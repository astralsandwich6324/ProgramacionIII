@page "/ventas/editar/0"
@page "/ventas/editar/{Id:int}"
@inject NavigationManager Nav
@inject Contexto ctx
@using Microsoft.EntityFrameworkCore
@inject IJSRuntime jsx
@using POS.Api.Data;
@using POS.Api.Modelos;

<PageTitle>Ventas</PageTitle>

<div class="container">
    <div class="row mt-3">
        <h4 class="mt-3 col">Verder producto</h4>

    <div class="text-end mb-3 mt-3 col">
        <button class="btn btn-primary" @onclick="VerVentas"><i class="bi bi-eye-fill" style="color:#fff; font-size: 20px; left: 3px;"></i> Ver Ventas</button>
    </div>
    </div>
    


    <EditForm Model="@ventas" OnValidSubmit="() => Guardar(ventas.InventoryId)">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="row mb-3 form-input-container">
            <div class="form-group mt-3 mb-3">
                <label for="Name">Producto:</label>
                <select id="Name" @bind="ventas.InventoryId" @oninput="ObtenerId" class="form-control">
                    @foreach (var producto in productos) 
                    {
                        <option value="@producto.Id">@producto.Name</option>
                    }
                </select>
            </div>
            <div class="row mb-3">
                <div class="col">
                    <label for="cant" class="form-label">Cantidad</label>
                    <InputNumber id="cant" class="form-control" @bind-Value="ventas.Cantidad" @oninput="ActucalizarPrecio" />
                </div>
                <div class="col">
                    <label for="price" class="form-label">Precio</label>
                    <input type="number" id="price" class="form-control" @bind="precioVenta"/>
                </div>
            </div>

        </div>

        <div class="row mb-3">
            <div class="col">
                <label for="Fechav" class="form-label">Fecha de venta</label>
                <InputDate id="Fechav" class="form-control" @bind-Value="@ventas.FechaVenta" />
            </div>

        </div>
        <div class="row mb-3">

            <div class="col">
                <label for="desc" class="form-label">Descripcion</label>
                <InputText id="desc" class="form-control" @bind-Value="@ventas.Description" />
            </div>
        </div>


        <div class="text-center mb-3">
            <button type="submit" class="btn btn-success">Guardar</button>
        </div>
    </EditForm>
<br>

</div>

@code {

    [Parameter] public int Id { get; set; }

    Sells ventas = new Sells();

    List<Inventory> productos = new();

    Inventory inventario = new Inventory();



    //obtener id

    void ObtenerId(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int nuevoNumero)){
            ventas.InventoryId = nuevoNumero;
        }
        else{
            jsx.InvokeVoidAsync("alert", "Valor no valido");
        }
    }

    //Actualizar precio
    double precioVenta;

    void ActucalizarPrecio(ChangeEventArgs e)
    {

        if (int.TryParse(e.Value?.ToString(), out int nuevoNumero))
        {
            ventas.Cantidad = nuevoNumero;
        }
        else
        {
            jsx.InvokeVoidAsync("alert", "Valor no valido");
        }

        if (ventas.InventoryId != null){
            var precioVentaF = productos
            .Where(p => p.Id == ventas.InventoryId).FirstOrDefault();

            precioVenta = precioVentaF.BasePrice * ventas.Cantidad;

            ventas.SalePrice = precioVenta;
        }
        else{
            jsx.InvokeVoidAsync("alert", "El valor no puede ser nulo");
        }

    }


    protected async Task Guardar(int id)
    {

        if (ventas.Id > 0)
        {
            ctx.VentasDB.Update(ventas);

        }
        else
        {
            ctx.VentasDB.Add(ventas);

        }

        var inventarioInduvidual = await ctx.InventoryDB
            .Where(i => i.Id == id)
            .FirstOrDefaultAsync();

        if (inventarioInduvidual != null)
        {
            if(ventas.Cantidad <= inventarioInduvidual.Stock){
                inventarioInduvidual.Stock -= ventas.Cantidad;
                ctx.InventoryDB.Update(inventarioInduvidual);
                await ctx.SaveChangesAsync();
                ventas = new Sells();
                precioVenta = 0;
            }
            else{
                jsx.InvokeVoidAsync("alert", "No tienes esa cantidad en el inventario");
            }
            
            
        }

        
        
        
        StateHasChanged();

    }

    private void VerVentas(){
        Nav.NavigateTo("/ver_ventas");
    }

    protected override void OnInitialized(){
        productos = ctx.InventoryDB.ToList();
        if(Id != 0){
            ventas = ctx.VentasDB
            .Include(v => v.Inventory)
                         .FirstOrDefault(v => v.Id == Id) ?? new Sells();

        }
    }

    
}
<style>
    .container h4{
    
    font-weight: bold;
}

.container{
    font-weight: bold;
}

.container form input{
    border:solid #000 1px;
}

.container form select{
    border:solid #000 1px;
}


</style>
